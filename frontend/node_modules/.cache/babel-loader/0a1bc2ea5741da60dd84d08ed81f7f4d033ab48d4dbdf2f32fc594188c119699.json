{"ast":null,"code":"var _jsxFileName = \"/Users/abeehazara/Documents/GitHub/DAPP_Testing/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  var signer;\n  const connectWallet = async () => {\n    await provider.send('eth_requestAccounts', []);\n  };\n  signer = provider.getSigner();\n  connectWallet();\n  const contractAddress = '0x033f2370ceefdcd8a1abd90b6de6b2da0c72e5a2';\n  const ABI = '[ { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"_memberId\", \"type\": \"uint256\" } ], \"name\": \"savingsEvent\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"_name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"_balance\", \"type\": \"uint256\" } ], \"name\": \"addMember\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"_memberId\", \"type\": \"uint256\" } ], \"name\": \"get\", \"outputs\": [ { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" }, { \"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"balance\", \"type\": \"uint256\" } ], \"internalType\": \"struct SavingsAccount.Member\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getMember\", \"outputs\": [ { \"internalType\": \"uint256[]\", \"name\": \"\", \"type\": \"uint256[]\" }, { \"internalType\": \"string[]\", \"name\": \"\", \"type\": \"string[]\" }, { \"internalType\": \"uint256[]\", \"name\": \"\", \"type\": \"uint256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getMembers2\", \"outputs\": [ { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" }, { \"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"balance\", \"type\": \"uint256\" } ], \"internalType\": \"struct SavingsAccount.Member[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"memberCount\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"members\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" }, { \"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"balance\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]';\n  const contract = new ethers.Contract(contractAddress, ABI, signer);\n  const [storedPrice, setStoredPrice] = useState(contract.getMembers2());\n  const getStoredPrice = async () => {\n    try {\n      const contractPrice = await contract.getMembers2();\n      var a = contractPrice;\n      console.log(contractPrice.toString(), \"hh\");\n      setStoredPrice(contractPrice);\n      return contractPrice;\n    } catch (error) {\n      console.log(\"getStoredPrice Error: \", error);\n    }\n  };\n  async function updateNewPrice() {\n    try {\n      const transaction = await contract.addMember(\"abeer\", 6);\n      await transaction.wait();\n      await getStoredPrice();\n    } catch (error) {\n      console.log(\"updateNewPrice Error: \", error);\n    }\n  }\n  useEffect(() => {\n    getStoredPrice().catch(console.error);\n    setStoredPrice(storedPrice);\n\n    // const map1 = storedPrice.map(x => x);\n    // console.log(map1,\"gyigygiyyyy\")\n    // setStoredPrice(map1)\n  }, [console.log(storedPrice, \"ygyyggygygy2\"), console.log(storedPrice[1][1].name)]);\n  const names = [\"whale\", \"squid\", \"turtle\", \"coral\", \"starfish\"];\n  const NamesList = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: names.map(name => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", name, \" \"]\n      }, name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: storedPrice && storedPrice.map(_ref => {\n          let {\n            name,\n            id\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: id\n          }, name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Update Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-dark\",\n          onClick: updateNewPrice,\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Stored Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-dark\",\n          onClick: getStoredPrice,\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"uDGZSAnZzQUhAOjgCAv3gVYbncI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","detectEthereumProvider","ReactDOM","App","provider","providers","Web3Provider","window","ethereum","signer","connectWallet","send","getSigner","contractAddress","ABI","contract","Contract","storedPrice","setStoredPrice","getMembers2","getStoredPrice","contractPrice","a","console","log","toString","error","updateNewPrice","transaction","addMember","wait","catch","name","names","NamesList","map","id"],"sources":["/Users/abeehazara/Documents/GitHub/DAPP_Testing/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport ReactDOM from \"react-dom\";\n\nfunction App() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    var signer ;\n    const connectWallet = async () => {\n        await provider.send('eth_requestAccounts', []);}\n    signer = provider.getSigner();\n    connectWallet();\n    const contractAddress = '0x033f2370ceefdcd8a1abd90b6de6b2da0c72e5a2';\n    const ABI = '[ { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"_memberId\", \"type\": \"uint256\" } ], \"name\": \"savingsEvent\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"_name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"_balance\", \"type\": \"uint256\" } ], \"name\": \"addMember\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"_memberId\", \"type\": \"uint256\" } ], \"name\": \"get\", \"outputs\": [ { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" }, { \"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"balance\", \"type\": \"uint256\" } ], \"internalType\": \"struct SavingsAccount.Member\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getMember\", \"outputs\": [ { \"internalType\": \"uint256[]\", \"name\": \"\", \"type\": \"uint256[]\" }, { \"internalType\": \"string[]\", \"name\": \"\", \"type\": \"string[]\" }, { \"internalType\": \"uint256[]\", \"name\": \"\", \"type\": \"uint256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getMembers2\", \"outputs\": [ { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" }, { \"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"balance\", \"type\": \"uint256\" } ], \"internalType\": \"struct SavingsAccount.Member[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"memberCount\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"name\": \"members\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\" }, { \"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"balance\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]'\n    const contract = new ethers.Contract(contractAddress, ABI, signer);\n    \n    const [storedPrice, setStoredPrice] = useState(contract.getMembers2());\n\n    const getStoredPrice = async () => {\n      try {\n        const contractPrice = await contract.getMembers2();\n        var a= contractPrice;\n        console.log(contractPrice.toString(),\"hh\")\n        setStoredPrice(contractPrice);\n        return  contractPrice;\n      } catch (error) {\n        console.log(\"getStoredPrice Error: \", error);\n      }\n    }\n\n    async function updateNewPrice() {\n      try {\n        const transaction = await contract.addMember(\"abeer\",6);\n        await transaction.wait();\n        await getStoredPrice();\n      } catch (error) {\n        console.log(\"updateNewPrice Error: \", error);\n      }\n  \n    }\n    useEffect(() => {\n      \n   getStoredPrice().catch(console.error);\n   setStoredPrice(storedPrice);\n   \n    // const map1 = storedPrice.map(x => x);\n    // console.log(map1,\"gyigygiyyyy\")\n    // setStoredPrice(map1)\n\n  }, [console.log(storedPrice,\"ygyyggygygy2\"),\nconsole.log( storedPrice[1][1].name),\n]\n  )\n\n\n  const names = [\"whale\", \"squid\", \"turtle\", \"coral\", \"starfish\"];\n  const NamesList = () => (\n    <div>\n      <ul>{names.map(name => <li key={name}> {name} </li>)}</ul>\n    </div>\n  );\n      return (\n        \n        <div className=\"container\">\n          {/* {storedPrice && storedPrice.map(user => (\n                <div key={user.name}>\n                    <p>{user.id}</p>\n                    <p>{user.balance}</p>\n                </div>\n            ))} */}\n           \n          <div className=\"row mt-5\">\n    \n             {/* <div className=\"col\">\n              <h3>Stored Price</h3>\n              <p>Stored ETH/USD Price: {storedPrice}</p>\n            </div>  */}\n     <div className=\"col\">\n     {\n              storedPrice && storedPrice.map( ( {name, id} ) => {\n                 return <p key={name}>{id}</p>\n            })\n            }\n            </div>\n\n\n            <div className=\"col\">\n              <h3>Update Price</h3>\n              <button type=\"submit\" className=\"btn btn-dark\" \n    onClick={updateNewPrice}>Update</button>\n            </div>\n\n            <div className=\"col\">\n              <h3>Stored Price</h3>\n              <button type=\"submit\" className=\"btn btn-dark\" \n    onClick={getStoredPrice}>Update</button>\n            </div>\n    {  }\n          </div>\n        </div>\n        \n      );\n      \n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}